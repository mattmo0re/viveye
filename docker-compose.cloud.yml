version: '3.8'

services:
  # VivEye Backend API
  viveye-server:
    build:
      context: .
      dockerfile: Dockerfile.server
    container_name: viveye-server
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - PORT=5000
      - MONGODB_URI=${MONGODB_URI}
      - JWT_SECRET=${JWT_SECRET}
      - DOMAIN=${DOMAIN}
      - SSL_ENABLED=true
      - CORS_ORIGIN=https://${DOMAIN}
    ports:
      - "5000:5000"
    volumes:
      - ./logs:/app/logs
      - ./tor-data:/app/tor-data
    networks:
      - viveye-network
    depends_on:
      - mongodb
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # VivEye Agent Server (WebSocket)
  viveye-agent-server:
    build:
      context: .
      dockerfile: Dockerfile.agent
    container_name: viveye-agent-server
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - PORT=8080
      - MONGODB_URI=${MONGODB_URI}
    ports:
      - "8080:8080"
    volumes:
      - ./logs:/app/logs
    networks:
      - viveye-network
    depends_on:
      - mongodb
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # VivEye Frontend (Nginx + React)
  viveye-frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
    container_name: viveye-frontend
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - ./logs/nginx:/var/log/nginx
    networks:
      - viveye-network
    depends_on:
      - viveye-server
      - viveye-agent-server
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # MongoDB (if not using Atlas)
  mongodb:
    image: mongo:7.0
    container_name: viveye-mongodb
    restart: unless-stopped
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_ROOT_USERNAME}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_ROOT_PASSWORD}
      - MONGO_INITDB_DATABASE=viveye
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
      - ./mongodb-init:/docker-entrypoint-initdb.d:ro
    networks:
      - viveye-network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis for caching and sessions
  redis:
    image: redis:7-alpine
    container_name: viveye-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - viveye-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Tor for anonymous communication
  tor:
    image: dperson/torproxy
    container_name: viveye-tor
    restart: unless-stopped
    ports:
      - "9050:9050"
    volumes:
      - ./tor-data:/etc/tor
    networks:
      - viveye-network
    environment:
      - TOR_PROXY_TYPE=tor
      - TOR_DNSPORT=5353
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9050"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Monitoring with Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: viveye-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - viveye-network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'

  # Grafana for dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: viveye-grafana
    restart: unless-stopped
    ports:
      - "3001:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana:/etc/grafana/provisioning:ro
    networks:
      - viveye-network
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false

  # Log aggregation with ELK Stack
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: viveye-elasticsearch
    restart: unless-stopped
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms2g -Xmx2g"
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - viveye-network

  logstash:
    image: docker.elastic.co/logstash/logstash:8.11.0
    container_name: viveye-logstash
    restart: unless-stopped
    volumes:
      - ./monitoring/logstash.conf:/usr/share/logstash/pipeline/logstash.conf:ro
      - ./logs:/usr/share/logstash/logs:ro
    networks:
      - viveye-network
    depends_on:
      - elasticsearch

  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    container_name: viveye-kibana
    restart: unless-stopped
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    networks:
      - viveye-network
    depends_on:
      - elasticsearch

volumes:
  mongodb_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  elasticsearch_data:
    driver: local

networks:
  viveye-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
